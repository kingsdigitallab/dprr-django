#!/usr/bin/python# -*- coding: utf-8 -*-import csvimport reimport itertoolsimport loggingfrom promrep.models import PostAssertion, Office, Person, \    Praenomen, SecondarySource, Sex# Setup loggingLOGGER = logging.getLogger()# LOGGER.setLevel(logging.DEBUG)LOGGER.setLevel(logging.INFO)ch = logging.StreamHandler()log_formatter = logging.Formatter(    u"%(levelname)s: [%(asctime)s] %(message)s")ch.setFormatter(log_formatter)LOGGER.addHandler(ch)def addComment(postID):    global note_is_id# id of inserted note (string)    sql = "insert into promrep_postassertionnote (created, modified, note_type, text, extra_info, secondary_source_id) values(current_timestamp, current_timestamp,1, %s, '', %s) returning id"    text = "RRC ref. " + noteRef    cursor.execute(sql, [text, RRCSourceID])    noteID = cursor.fetchone()[0]    sql = "insert into promrep_postassertion_notes (postassertion_id, postassertionnote_id) values (%s, %s) returning id"    cursor.execute(sql, [postID, noteID])    isID = cursor.fetchone()[0]    note_is_id = str(isID)    return isIDdef doInsert(table, values, ):    sql = "insert into " + table + " (created, modified"    colNames = ""    colVals = []    valStr = "current_timestamp, current_timestamp" + ", %s" * len(values)    for item in values:        colNames = colNames + ", " + item        colVals.append(values[item])    sql = sql + colNames + ") values (" + valStr + ") returning id"    cursor.execute(sql, colVals)    newKey = cursor.fetchone()[0]    return newKeydef createPost(personKey):    global postID    # id of inserted post (string)    data = {}    data["original_text"] = originalNameText.decode("iso-8859-1")    data["office_xref"] = ''    data["uncertain"] = '0'    data["position"] = 0    data["date_start"] = -int(dateStart)    data["date_start_uncertain"] = startUncertain    data["date_end"] = -int(dateEnd)    data["date_end_uncertain"] = endUncertain    data["date_display_text"] = ''    data["date_source_text"] = dateSourceText    data["review_flag"] = "0"    data["date_secondary_source_id"] = RRCSourceID    data["office_id"] = office    data["person_id"] = personKey    data["role_id"] = 1    data["secondary_source_id"] = RRCSourceID    data["province_original"] = ''    data["province_original_expanded"] = ''    key = doInsert("promrep_postassertion", data)    postID = str(key)    addComment(key)def clean_field(field, a_string):    """cleans uncertain chars from a string, outputs a dictionary    with the cleaned string and uncertainty flag    """    # chars to be removed from  most name fields    unc_chars = ["?", "(", ")", "[", "]"]    uncertain = False    for ch in unc_chars:        if ch in a_string:            uncertain = True            a_string = a_string.replace(ch, '')    dict_obj = {        field: a_string,        field + "_uncertain": uncertain    }    return dict_objdef create_person(row_dict):    """creates a new person object from a dictionary"""    person_dict = {        'original_string': row_dict.get('original_name_text', ''),        'review_needed': row_dict.get('review_needed', False),    }    praenomen_str = row_dict.get('praenomen', None)    praenomen_dic = clean_field('praenomen', praenomen_str)    # TODO: fetch praenomen object    # add to person    for field in ['nomen', 'cognomen', 'other_names']:        field_string = row_dict.get(field, None)        if field_string:            d_obj = clean_field(field, field_string)        person_dict.update(d_obj)    if 'other_names' in person_dict:        LOGGER.info(person_dict)    # try:    # praenomen = Praenomen.get(abbrev = praenomen_str)    # person['praenomen']    # else:    # ...    return 0def not_used():    if pName not in praenomens:        print >>logfile, "ERROR", line, ": unexpected praenomen found:", praenomen        pName = '-.'    p_id = praenomens[pName]    data["review_notes"] = "created by upload_RRC script"    data["review_flag"] = reviewFlag    fixednomen = re.sub(r"\?", r"", nomen)    data["nomen"] = fixednomen    data["nomen_uncertain"] = isUncertain(nomen)    fixedcognomen = re.sub(r"\?", r"", cognomen)    data["cognomen"] = fixedcognomen    data["cognomen_uncertain"] = isUncertain(cognomen)    fixedothernames = re.sub(r"\?", r"", otherNames)    data["other_names"] = fixedothernames    data['other_names_uncertain'] = isUncertain(otherNames)    fixedfiliation = re.sub(r"\?", r"", filiation)    data["filiation"] = fixedfiliation    data["filiation_uncertain"] = isUncertain(filiation)    data["gens_uncertain"] = '0'    data["tribe_uncertain"] = '0'    data["re_number"] = RE    data["re_number_old"] = ''    data["patrician_uncertain"] = "0"    data["patrician_notes"] = ''    data["novus_uncertain"] = '0'    data["novus_notes"] = ''    data["eques_uncertain"] = '0'    data["eques_notes"] = ''    data["nobilis_uncertain"] = '0'    data["nobilis_notes"] = ''    data["extra_info"] = ''    data["date_display_text"] = ''    data["date_source_text"] = ''    data["sex_id"] = 1    key = doInsert("promrep_person", data)    personID = str(key)    return 0def lower_underscore_first(iterator):    """converts uppercase to lowercase and replaces spaces with underscores"""    return itertools.chain([next(iterator).lower().strip().replace(' ', '_')], iterator)def read_input_file(ifname):    with open(ifname, 'rU') as csvfile:        csvDict = csv.DictReader(            lower_underscore_first(csvfile), delimiter=";")        for entry in csvDict:            # parse each entry            # "New" persons            if entry['person_id'] == "0":                p_id = create_person(entry)                # LOGGER.info("new person id %i", p_id)            else:                p_id = int(entry['person_id'])                # LOGGER.info("person already exists with id=%i", p_id)def run():    datafilename = "promrep/scripts/monetales/RRCExportv5.csv"    read_input_file(datafilename)