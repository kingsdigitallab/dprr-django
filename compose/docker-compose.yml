name: 'dprr_openstack'

services:

  nginx-proxy:
    image: nginxproxy/nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro


  nginx:
    build:
      context: ..
      dockerfile: ./compose/nginx/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    expose:
      - "8001"
    volumes:
      - ../volumes/django/static:/usr/share/nginx/static:ro
    environment:
      VIRTUAL_HOST: ${DJANGO_ALLOWED_HOSTS}
      VIRTUAL_PATH: "~^/(static/|redist/|robots.txt)"
      VIRTUAL_PROTO: http
      VIRTUAL_PORT: 8001

  django:
    build:
      context: ../
      dockerfile: ./compose/django/Dockerfile
    command: /start
    volumes:
      - ../volumes/django/static:/app/static
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      VIRTUAL_HOST: ${DJANGO_ALLOWED_HOSTS}
      VIRTUAL_PATH: "/"
      VIRTUAL_PROTO: http
      VIRTUAL_PORT: 8000

  db:
    #    build:
    #      context: ../
    #      dockerfile: ./compose/local/postgres/Dockerfile
    image: postgres:12.3
    volumes:
      - ../volumes/local_postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    expose:
      - "5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      timeout: 10s
      interval: 5s
      retries: 10

  elasticsearch:
    image: elasticsearch:7.10.1
    env_file:
      - .env
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped

  # Original repositories located at: /vol/poms3/webroot/rdf/repositories
  # files will be added manually to volumes on server
  rdf:
    image: tomcat:9
    restart: unless-stopped
    ports:
      - "8180:8080"
    volumes:
      - ../volumes/tomcat/logs:/usr/local/tomcat/logs/
      - ../volumes/tomcat/webapps:/usr/local/tomcat/webapps
      - ../volumes/tomcat/rdf4j:/usr/local/etc/rdf4j
    environment:
      VIRTUAL_HOST: ${DJANGO_ALLOWED_HOSTS}
      VIRTUAL_PATH: "/rdf"
      VIRTUAL_PROTO: http
      VIRTUAL_PORT: 8080

#  postgres:
#    build:
#      context: ../
#      dockerfile: ./compose/production/postgres/Dockerfile
#    restart: unless-stopped
#    image: postgres
#    environment:
#      #POSTGRES_USER: ${POSTGRES_USER}
#      #POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      PGDATA: /var/lib/postgresql/data/pgdata
#    healthcheck:
#      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
#      timeout: 10s
#      interval: 5s
#      retries: 10
#    volumes:
#      - ../volumes/postgres_data:/var/lib/postgresql/data:Z
#      - ../volumes/postgres_data_backups:/backups:z
#    env_file:
#      - .env
#    expose:
#      - "5432"





  # Core config at /opt/solr/server/solr/mycores/dprr/conf
  #  solr:
  #    image: solr:6.6.5
  #    ports:
  #      - "8983:8983"
  #    volumes:
  #      - local_solr_data:/var/solr
  #    command:
  #      - solr-precreate
  #      - dprr

  # Remember to copy the schema! (Not automatic at present)
  # To build:
  # docker-compose -f local.yml run --rm web python manage.py build_solr_schema --configure-directory=/app/solr_config/config
  # then docker cp results to solr folder above
#  web:
#    build:
#      context: ../
#      dockerfile: django/Dockerfile
#    #command: python manage.py runserver 0.0.0.0:8000
#    command: /start
##    volumes:
##      - .:/app
#    ports:
#      - "8000:8000"
#    depends_on:
#      db:
#        condition: service_healthy
#      solr:
#        condition: service_started